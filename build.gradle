plugins {
    id 'java'
	id 'fabric-loom' version '1.1.8' apply false
	id 'maven-publish'
	id 'gradle-build-utils' version '1.1.0'
}

Properties props = loadProperties.call('publish.properties') as Properties

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = gitVersion.call()
group = project.maven_group

allprojects {
    apply plugin: 'fabric-loom'

    repositories {
        mavenCentral()

        maven {
            url "https://repo.lclpnet.work/repository/internal"
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

        /* other Java dependencies */
        implementation 'com.google.code.findbugs:jsr305:3.0.2'

        implementation "work.lclpnet:plugins4j:${project.plugins4j_version}"
    }

    tasks.withType(JavaCompile).tap {
        configureEach {
            options.release = 17
        }
    }

    java {
        withSourcesJar()
    }
}

subprojects {
    dependencies {
        // add rootProject classes to subproject
        implementation project(path: ":", configuration: "namedElements")
    }
}

loom {
    splitEnvironmentSourceSets()

    mods {
        mplugins {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

dependencies {
    /* other Java dependencies */
    implementation 'org.json:json:20220924'
    include 'org.json:json:20220924'

    include "work.lclpnet:plugins4j:${project.plugins4j_version}"

    /* testing */
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

test {
    useJUnitPlatform()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.archives_base_name

            from components.java

            pom {
                name = 'MPlugins'
                description = 'Integration of plugins4j into the fabric mod loader. '
            }
        }
    }

    repositories {
        maven {
            def env = System.getenv()
            if (Arrays.stream("DEPLOY_URL", "DEPLOY_USER", "DEPLOY_PASSWORD").allMatch(env.&containsKey)) {
                credentials {
                    username env.get("DEPLOY_USER")
                    password env.get("DEPLOY_PASSWORD")
                }
                url env.get("DEPLOY_URL")
            }
            else if (Arrays.stream("mavenHost", "mavenUser", "mavenPassword").allMatch(props.&containsKey)) {
                credentials {
                    username props.getProperty('mavenUser')
                    password props.getProperty('mavenPassword')
                }
                url props.getProperty('mavenHost')
            } else {
                url "file:///${project.projectDir}/repo"
            }
        }
    }
}