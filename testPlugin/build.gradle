import java.nio.file.Files

plugins {
    id 'java'
}

group 'work.lclpnet.plugins'
version = rootProject.version
archivesBaseName = 'testPlugin'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}

processResources {
    inputs.property "version", project.version

    filesMatching("plugin.json") {
        expand "version": project.version
    }
}

abstract class DeployPluginsTask extends DefaultTask {

    @TaskAction
    def execute() {
        final def proj = this.getProject()
        final def version = proj.getVersion()
        final def props = getProps(proj)
        final def buildDir = proj.getBuildDir().toPath()

        def deployPath = copyPlugins(buildDir, props, version)

        println('Plugins have been deployed to %s'.formatted(deployPath))
    }

    static def getProps(Project project) {
        var projPath = project.getProjectDir().toPath()
        def propsPath = projPath.resolve('mplugindev.properties')

        if (!Files.exists(propsPath))
            throw new IOException('mplugindev.properties not found in project directory.')

        def props = new Properties()

        try (def input = Files.newInputStream(propsPath)) {
            props.load(input);
        }

        return props
    }

    static def getDeployPath(Properties props) {
        def deployPath = props.get('deployPath')

        if (!(deployPath instanceof String))
            throw new IllegalStateException('Deploy path not configured.')

        return java.nio.file.Path.of(deployPath)
    }

    static def copyPlugins(java.nio.file.Path buildDir, Properties props, version) {
        if (!Files.exists(buildDir)) return

        final def deployPath = getDeployPath(props)

        final def remapped = java.util.Optional.ofNullable(props.get('deployRemapped')).orElse(true)

        final def artifactDir = buildDir.resolve(remapped == true ? 'libs' : 'devlibs')

        def plugins = ['testPlugin']

        plugins.forEach(plugin -> {
            def testPlugin = '%s-%s%s.jar'.formatted(plugin, version, remapped == true ? '' : '-dev')
            copy(artifactDir.resolve(testPlugin), deployPath.resolve(testPlugin))
        })

        return deployPath
    }

    static def copy(java.nio.file.Path a, java.nio.file.Path b) {
        // transfer file contents to enable plugin hot-swapping using reloading
        try (def input = new FileInputStream(a.toFile()); def output = new FileOutputStream(b.toFile())) {
            input.transferTo output
        }
    }
}

tasks.register('deployPlugins', DeployPluginsTask)

deployPlugins.configure {
    dependsOn build
}