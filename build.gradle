import java.nio.file.Files

plugins {
    id 'java'
	id 'fabric-loom' version '1.1.8'
	id 'maven-publish'
	id 'gradle-build-utils' version '1.1.0'
}

Properties props = loadProperties.call('publish.properties') as Properties

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = gitVersion.call()
group = project.maven_group

sourceSets {
    testPlugin {
        java {
            compileClasspath += main.output + main.compileClasspath
            runtimeClasspath += main.output + main.runtimeClasspath
        }
    }
}

configurations {
    testPluginImplementation.extendsFrom(implementation)
    testPluginRuntimeOnly.extendsFrom(runtimeOnly)
}

repositories {
    mavenCentral()

    maven {
        url "https://repo.lclpnet.work/repository/internal"
    }
}

loom {
    splitEnvironmentSourceSets()

    mods {
        mplugins {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    /* other Java dependencies */
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    implementation 'org.json:json:20220924'
    include 'org.json:json:20220924'

    // make plugins4j visible for consumers at compile time
    api "work.lclpnet:plugins4j:${project.plugins4j_version}"
    include "work.lclpnet:plugins4j:${project.plugins4j_version}"

    /* testing */
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

processTestPluginResources {
    inputs.property "version", project.version

    filesMatching("plugin.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	withSourcesJar()
}

test {
    useJUnitPlatform()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

task testPluginJar(type: Jar) {
    from sourceSets.testPlugin.output
    archiveVersion.set(project.version.toString())
    archiveBaseName.set('testPlugin')
}

artifacts {
    archives testPluginJar
}

abstract class DeployPluginsTask extends DefaultTask {
    @TaskAction
    def execute() {
        final def proj = this.getProject()
        final def plugins = proj.getTasks().named('testPluginJar').get().outputs.files.files
        final def pluginsDir = proj.getProjectDir().toPath().resolve('run/plugins')

        copyPlugins(plugins, pluginsDir)

        println('Plugins have been deployed to %s'.formatted(pluginsDir))
    }

    static def copyPlugins(Set<File> plugins, java.nio.file.Path pluginsDir) {
        if (!Files.exists(pluginsDir)) Files.createDirectories(pluginsDir)

        plugins.forEach(plugin -> {
            copy(plugin.toPath(), pluginsDir.resolve(plugin.getName()))
        })
    }

    static def copy(java.nio.file.Path a, java.nio.file.Path b) {
        // transfer file contents to enable plugin hot-swapping using reloading
        try (def input = new FileInputStream(a.toFile()); def output = new FileOutputStream(b.toFile())) {
            input.transferTo output
        }
    }
}

tasks.register('deploy', DeployPluginsTask)

deploy.configure {
    dependsOn build
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.archives_base_name

            from components.java

            pom {
                name = 'MPlugins'
                description = 'Integration of plugins4j into the fabric mod loader. '
            }
        }
    }

    repositories {
        maven {
            def env = System.getenv()
            if (Arrays.stream("DEPLOY_URL", "DEPLOY_USER", "DEPLOY_PASSWORD").allMatch(env.&containsKey)) {
                credentials {
                    username env.get("DEPLOY_USER")
                    password env.get("DEPLOY_PASSWORD")
                }
                url env.get("DEPLOY_URL")
            }
            else if (Arrays.stream("mavenHost", "mavenUser", "mavenPassword").allMatch(props.&containsKey)) {
                credentials {
                    username props.getProperty('mavenUser')
                    password props.getProperty('mavenPassword')
                }
                url props.getProperty('mavenHost')
            } else {
                url "file:///${project.projectDir}/repo"
            }
        }
    }
}